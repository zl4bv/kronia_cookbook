#
# This file was generated by Chef and may be overwritten.
#
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
#

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

alias sudo='sudo '

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

if type "apt-get" >/dev/null 2>&1; then
  alias canihaz='sudo apt-get -y install'
elif type "brew" >/dev/null 2>&1; then
  alias canihaz='brew install'
else
  alias canihaz='echo Y U NO PKG MGR'
fi

if type "poweroff" >/dev/null 2>&1; then
  alias bai='sudo poweroff'
elif type "osascript" >/dev/null 2>&1; then
  alias bai="osascript -e 'tell app \"loginwindow\" to «event aevtrsdn»'"
fi

if type "ack-grep" >/dev/null 2>&1; then
  alias ag='ack-grep'
fi

function i3_focused_workspace {
  i3-msg -t get_workspaces | ruby -e "require 'json'; puts JSON.parse(STDIN.read).select { |wrk| wrk['focused'] }.first['num']"
}

function rename_i3_workspace_to_dir_name {
  i3-msg "rename workspace to $(i3_focused_workspace):${PWD##*/}"
}

alias ri3='rename_i3_workspace_to_dir_name'

# Heavily inspired by @mathiasbynens’s prompt: https://github.com/mathiasbynens/dotfiles

# Set PS1_NOFANCY to disable the fancy prompt
# Set PS1_NOSYMBOL to disable unicode symbols

symbol_arrow1=${symbol_arrow1:-}
symbol_arrow2=${symbol_arrow2:-}
symbol_branch=${symbol_branch:-\ue0a0}

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
elif [[ "$OSTYPE" == "darwin"* ]]; then
  export TERM='xterm-256color'
fi;

if [ -f /usr/lib/git-core/git-sh-prompt ]; then
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWSTASHSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  source /usr/lib/git-core/git-sh-prompt
fi

_git_ps1() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='*';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='%';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" ${s}";

    printf -- "${1}" "${branchName}${s}";
  else
    return;
  fi;
}

_version_ps1 ()
{
  version_str=""
  toplevel=$(git rev-parse --show-toplevel 2>/dev/null)

  if [ -z "$toplevel" ]; then
    return 0
  fi

  if [[ -f "${toplevel}/metadata.rb" ]]; then
    version_str=$(cat "${toplevel}/metadata.rb" | grep version | sed -e "s/  \{1,\}/ /g" | sed -e "s/'//g" | cut -d' ' -f2)
  fi

  for f in ${toplevel}/*.gemspec; do
    [ -e "${f}" ] && version_str=$(ruby -e "require 'rubygems'; puts Gem::Specification.load('${f}').version")
  done

  if [[ "x$version_str" != "x" ]]; then
    printf "${symbol_arrow2} ${version_str} "
  fi
}

_color_map() {
  fg1=${1}
  bg1=${2}
  fg2=${3}
  bg2=${4}
}

if [[ "${USER}" == "root" ]]; then
  _color_map 232 214 232 202;
elif [[ "${SSH_TTY}" ]]; then
  _color_map 17 45 255 17;
else
  _color_map 17 190 255 238;
fi;

if [ ! -z "${PS1_NOSYMBOL}" ]; then
  symbol_arrow1=''
  symbol_arrow2=''
  symbol_branch=''
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  symbol_branch=''
fi
vcs_fmtstr=" ${symbol_branch}%s "

if [ -z "${PS1_NOFANCY}" ]; then
  PS1="\[$(tput setaf $fg1)\]\[$(tput setab $bg1)\]"
  PS1+="${debian_chroot:+($debian_chroot)}\u@\h:\w " # user@host:path
  PS1+="\[$(tput setaf $bg1)\]\[$(tput setab $bg2)\]${symbol_arrow1}\[$(tput setaf $fg2)\]\[$(tput setab $bg2)\]"
  #PS1+="$(__git_ps1 "${vcs_fmtstr}" 2>/dev/null || _git_ps1 "${vcs_fmtstr}")" # Git branch
  #PS1+="$(_version_ps1)" # Extract project version
  PS1+="\[$(tput sgr0)\]\[$(tput setaf $bg2)\]${symbol_arrow1}\[$(tput sgr0)\] "
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

export EDITOR=vim

if [ -f ~/.bash_custom ]; then
  source ~/.bash_custom
fi
